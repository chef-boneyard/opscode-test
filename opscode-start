#!/usr/bin/env ruby

require 'rubygems'
require 'pp'
require 'appscript'
require 'mixlib/cli'

class OpscodeStart
  include Mixlib::CLI
  include Appscript
  
  option :community,
    :short => '-c',
    :long => '--community',
    :boolean => true,
    :description => 'Start the community site'
    
  option :environment,
    :short => '-e ENV',
    :long => '--environment ENV',
    :default => 'test',
    :description => 'Set the environment (test|dev), defaults to test'
  
  def run
    @srcdir = File.expand_path(File.dirname(__FILE__))
    @delay  = 1
    
    @base_cmd = case config[:environment]
      when 'test' 
        "cd #{@srcdir} && rake dev:features:start:"
      when 'dev'
        "cd #{@srcdir} && rake dev:start:"
      else 
        puts "--environment must be set to either 'test' or 'dev'"
        puts @opt_parser
        exit 1
    end

    tasks = {}
    tasks['platform'] = %w{couchdb rabbitmq parkplace chef_solr cert_erlang opscode_authz opscode_account opscode_org_creator opscode_expander chef_server chef_server_webui nginx}
    tasks['community']= tasks['platform'] + %w{community:mysql community:solr community:webui}
    
    services = config[:community] ? 'community' : 'platform'
    STDOUT.puts "Starting services:"
    pp service_list = tasks[services]
    start_services(service_list)
  end
  
  def auth_up
    system("sudo echo")  
  end
  
  def create_tab
    app("System Events").application_processes["Terminal.app"].keystroke("t", :using=>:command_down)
  end
  
  def activate_terminal
    app("/Applications/Utilities/Terminal.app").windows.first.activate  
    app("System Events").application_processes["Terminal.app"].keystroke("n", :using=>:command_down)
    app('Terminal')  
  end
  
  def start_service_in_last_tab(window,service)
    # use xterm escape codes to set the tab title to the service running in the tab.
    cmd = 
      "unset PROMPT_COMMAND; echo -e \"\\033]0;#{service}\\007\"; " + 
      @base_cmd +
      service
  
    app('Terminal').do_script(cmd, :in => window.tabs.last.get)
    sleep @delay  
  end
  
  def start_services(services)
    auth_up
    term = activate_terminal
    window = term.windows.first.get
  
    services.each do |service|
      create_tab
      start_service_in_last_tab(window,service)
    end
  end
end

if __FILE__ == $0
  os = OpscodeStart.new
  os.parse_options
  os.run
end