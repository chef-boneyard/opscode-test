#!/usr/bin/env ruby

require 'yaml'
require 'rubygems'
require 'pp'
require 'appscript'
require 'mixlib/cli'

class OpscodeStart
  include Mixlib::CLI
  include Appscript

  DEFAULT_CONFIG = {:rvm_version => "1.9.2@oc", :parkplace_rvm_version => "1.8.7@oc"}

  option :community,
    :short => '-c',
    :long => '--community',
    :boolean => true,
    :description => 'Start the community site'

  option :environment,
    :short => '-e ENV',
    :long => '--environment ENV',
    :default => 'test',
    :description => 'Set the environment (test|dev), defaults to test'

  option :rvm_version,
    :short => '-r VERSION',
    :long => '--rvm VERSION',
    :description => 'Use the specified RVM version when launching things'

  option :parkplace_rvm_version,
    :short => '-p VERSION',
    :long => '--parkplace-rvm VERSION',
    :description => 'Use the specified RVM version when launching parkplace'

  option :community_rvm_version,
    :long => '--community-rvm VERSION',
    #:default => nil,
    :description => 'Use the specified RVM version when launching the community site'

  def run
    @srcdir = File.expand_path(File.dirname(__FILE__))

    # load local config
    yaml_config_file = File.expand_path('../opscode-start.yml', __FILE__)
    local_config = if File.exist?(yaml_config_file)
      YAML.load_file(yaml_config_file)
    else
      {}
    end

    cli_config = config
    config = DEFAULT_CONFIG.merge(local_config)
    config = config.merge(cli_config)

    @base_cmd = case config[:environment]
      when 'test'
        "cd #{@srcdir} && rake dev:features:start:"
      when 'dev'
        "cd #{@srcdir} && rake dev:start:"
      else
        puts "--environment must be set to either 'test' or 'dev'"
        puts @opt_parser
        exit 1
    end

    parkplace_version = config[:parkplace_rvm_version] || config[:rvm_version]
    if parkplace_version
      @parkplace_base_cmd = "rvm use #{parkplace_version}; " + @base_cmd
    else
      @parkplace_base_cmd = @base_cmd
    end

    community_version = config[:community_rvm_version] || config[:rvm_version]
    if community_version
      @community_base_cmd = "rvm use #{community_version}; " + @base_cmd
    else
      @community_base_cmd = @base_cmd
    end

    if config[:rvm_version]
      @base_cmd = "rvm use #{config[:rvm_version]}; " + @base_cmd
    end

    tasks = {}
    tasks['platform'] = %w{couchdb rabbitmq parkplace chef_solr cert_erlang opscode_authz
                           opscode_account opscode_org_creator opscode_expander
                           opscode_job_worker chef_server erchef opscode_webui nginx database redis}
    tasks['community']= tasks['platform'] + %w{community:database community:solr community:webui}

    services = config[:community] ? 'community' : 'platform'
    STDOUT.puts "Starting services:"
    pp service_list = tasks[services]
    start_services(service_list)
  end

  def auth_up
    if not system("sudo -v")
      STDOUT.puts "sudo cancelled, bailing"
      exit 1
    end
  end

  def create_tab
    @window.activate
    app("System Events").application_processes["Terminal.app"].keystroke("t", :using=>:command_down)
  end

  def terminal_app
    @terminal_app ||= app("Terminal")
  end

  def create_term_window
    terminal_app.windows.first.activate
    app("System Events").application_processes["Terminal.app"].keystroke("n", :using=>:command_down)
    terminal_app.windows.get.each do |win|
      if win.closeable.get
        @window = win
        return @window
      end
    end
    raise 'Unable to find a closeable terminal window'
  end

  def start_service_in_tab(service, tab)
    # Special case for parkplace since it doesn't like 1.9.2
    if service == 'parkplace'
      base_cmd = @parkplace_base_cmd
    elsif service.start_with? 'community:'
      base_cmd = @community_base_cmd
    else
      base_cmd = @base_cmd
    end
    # use xterm escape codes to set the tab title to the service running in the tab.
    cmd = "unset PROMPT_COMMAND; echo -e \"\\033]0;#{service}\\007\"; #{base_cmd}#{service}"
    app('Terminal').do_script(cmd, :in => @window.tabs[tab].get)
  end

  def start_services(services)
    #auth_up
    create_term_window

    tab_index = 1 # applescript indexes from 1 instead of 0

    (services.size - 1).times { create_tab }

    services.each do |service|
      start_service_in_tab(service, tab_index)
      tab_index += 1
    end
  end
end

if __FILE__ == $0
  os = OpscodeStart.new
  os.parse_options
  os.run
end
