#! /usr/bin/env ruby

require 'rubygems'
require 'restclient'
require 'json'
require 'couchrest'
require 'sequel'
require 'opscode/mappers'

######################################################################
# config data
######################################################################

module Opscode::Test

  def self.config
    @config ||= Config.new
  end

  def self.configure
    yield config

    # TODO: this is fucking ugly.
    cdb_server = CouchRest::Server.new("http://#{config.couchdb_host}:#{config.couchdb_port}")
    account_db = CouchRest::Database.new(cdb_server, 'opscode_account')

    Mixlib::Authorization::Config.default_database          = account_db
    Mixlib::Authorization::Config.authorization_service_uri = "http://#{config.authz_host}:#{config.authz_port}"
    require 'mixlib/authorization/models'
  end

  module Configurable
    def config
      Opscode::Test.config
    end
  end

  class Config

    # config for writable data
    attr_accessor :output_directory

    # config for mysql
    attr_accessor :mysql_host
    attr_accessor :mysql_user
    attr_accessor :mysql_password

    # config for couchdb
    attr_accessor :couchdb_host
    attr_accessor :couchdb_port

    # config for couchdbauthz
    attr_accessor :couchdbauthz_host
    attr_accessor :couchdbauthz_port

    # config for authz
    attr_accessor :authz_host
    attr_accessor :authz_port

    # config for cert
    attr_accessor :cert_host
    attr_accessor :cert_port

    attr_accessor :superuser_cert
    attr_accessor :superuser_key
  end
end

Opscode::Test.configure do |c|
  c.output_directory = '/tmp/opscode-platform-test'

  c.mysql_host = 'localhost'
  c.mysql_user = 'root'
  c.mysql_password = ''

  c.couchdb_host = 'localhost'
  c.couchdb_port = '5984'

  c.couchdbauthz_host = 'localhost'
  c.couchdbauthz_port = '5984'

  c.authz_host = 'localhost'
  c.authz_port = '5959'

  c.cert_host = 'localhost'
  c.cert_port = '5140'

  c.superuser_cert = '/tmp/opscode-platform-test/superuser.cert'
  c.superuser_key  = '/tmp/opscode-platform-test/superuser.pem'
end

config = Opscode::Test.config

######################################################################
# warning, for Tim
######################################################################

# TODO: print out a warning with the configuration variables, stating
# that you are about to do some serious damage

######################################################################
# re-usable things, like couchdb_servers and mysql
######################################################################

module Opscode::Test

  def self.database_config
    @database_config ||= DatabaseConfig.new
  end

  module DatabaseHelper
    def mysql_db
      Opscode::Test.database_config.mysql_db
    end

    def couchdb_database(server, name)
      Opscode::Test.database_config.couchdb_database(server, name)
    end

    def couchdb_server(server)
      Opscode::Test.database_config.couchdb_server(server)
    end
  end

  class DatabaseConfig

    include Configurable

    attr_reader :mysql_db
    attr_reader :couchdb_server
    attr_reader :couchdbauthz_server

    def initialize
      @mysql_db = Sequel.connect("mysql2://#{config.mysql_user}:#{config.mysql_password}@#{config.mysql_host}/opscode_chef")
      @couchdbauthz_server = CouchRest::Server.new("http://#{config.couchdbauthz_host}:#{config.couchdbauthz_port}")
      @couchdb_server = CouchRest::Server.new("http://#{config.couchdb_host}:#{config.couchdb_port}")
    end

    def couchdb_database(server, name)
      couchdb_server = case server
                       when :authz; @couchdbauthz_server
                       when :main; @couchdb_server
                       end
      CouchRest::Database.new(couchdb_server, name)
    end

    def couchdb_server(server)
      case server
      when :authz; @couchdbauthz_server
      when :main; @couchdb_server
      end
    end

  end
end

include Opscode::Test::DatabaseHelper

######################################################################
# the user models
######################################################################

module Opscode::Test::Models
  class User

    attr_accessor :name
    attr_accessor :first_name
    attr_accessor :middle_name
    attr_accessor :last_name
    attr_accessor :display_name
    attr_accessor :email
    attr_accessor :password
    attr_accessor :certificate

    def create
      # TODO: use the api to create a user
    end

    private

    def to_hash
      {
        :username => name,
        :first_name => first_name,
        :middle_name => middle_name,
        :last_name => last_name,
        :display_name => display_name,
        :email => email,
        :password => password,
        :certificate => certificate.to_s
      }
    end
  end
end

module Opscode::Test::Models
  class Superuser < User

    attr_reader :authz_id

    include Opscode::Test::DatabaseHelper

    def create
      user_mapper = Opscode::Mappers::User.new(mysql_db, nil, 0)
      db_user = Opscode::Models::User.new(to_hash)
      user_mapper.create(db_user)
      @authz_id = db_user.authz_id
    end
  end
end

######################################################################
# create the credentials dir
######################################################################

unless Dir.exists?(config.output_directory)
  Dir.mkdir(config.output_directory)
end

######################################################################
# truncate the sql tables
######################################################################

mysql_db[:users].truncate

######################################################################
# delete the couchdb databases
######################################################################

couchdbauthz_databases = %w{
authorization
authorization_integration
}

couchdbauthz_databases.each do |name|
  begin
    couchdb_database(:authz, name).delete!
  rescue RestClient::ResourceNotFound; end
end

couchdb_databases = %w{
opscode_account
opscode_account_integration
opscode_account_internal
opscode_account_internal_integration
test_harness_setup
jobs
jobs_spec
}

couchdb_databases.each do |name|
  begin
    couchdb_database(:main, name).delete!
  rescue RestClient::ResourceNotFound; end
end

######################################################################
# clean up after naughty run
######################################################################

# hmmm... unlinking files? for what?

######################################################################
# create the couchdb databases
######################################################################

# create the authz databases
couchdbauthz_databases = %w{
authorization
}

couchdbauthz_databases.each do |name|
  couchdb_database(:authz, name).create!
end

# replicate the authz design docs
authz_db = couchdb_database(:authz, 'authorization')
replication_body = {
  :target => authz_db.uri,
  :source => 'authorization_design_documents'
}.to_json
replication_headers = {
  'Content-Type' => 'application/json'
}
RestClient.post("#{couchdb_server(:authz).uri}/_replicate",
                replication_body,
                replication_headers)

# create the account databases
couchdb_databases = %w{
opscode_account
opscode_account_internal
}

couchdb_databases.each do |name|
  couchdb_database(:main, name).create!
end

######################################################################
# create the superuser
######################################################################

# load the superuser cert and key from a file
cert_file = File.read(config.superuser_cert)
user_cert = OpenSSL::X509::Certificate.new(cert_file)

key_file = File.read(config.superuser_key)
user_key = OpenSSL::PKey::RSA.new(key_file)

# just set this up for dsl-style blocks. looks dumb for now
user = Opscode::Test::Models::Superuser.new
user.tap do |u|
  u.name = 'platform-superuser'
  u.first_name = 'Clark'
  u.last_name = 'Kent'
  u.display_name = ' Clark Kent'
  u.email = 'kryptonite@opscode.com'
  u.password = 'kryptonite'
  u.certificate = user_cert.to_s
end
user.create

File.open("#{config.output_directory}/superuser.pem", 'w') do |f|
  f.puts user_key.to_s
end

######################################################################
# create the global containers
######################################################################

auth_database = couchdb_database(:authz, 'authorization')
acct_database = couchdb_database(:main, 'opscode_account')

containersets = auth_database.get('containersets')['global_containerset']
containersets.each do |name, path|
  container = {
    :containername => name,
    :containerpath => path,
    :requester_id  => user.authz_id
  }
  Mixlib::Authorization::Models::Container.on(acct_database).new(container).save
end

