#! /usr/bin/env ruby

require 'rubygems'
$:.unshift(File.expand_path('../../lib', __FILE__))

require 'mixlib/cli'
require 'opscode/test'
require 'opscode/test/bootstrapper'

class BootstrapPlatform
  include Mixlib::CLI

  option(:config_file,
         :short => '-c CONFIG',
         :long => '--config CONFIG',
         :description => 'Path to the config file [REQUIRED]')

  option(:bootstrap_script,
         :short => '-s SCRIPT',
         :long => '--script SCRIPT',
         :description => 'Path to the bootstrap script [REQUIRED]')

  def run
    validate_options!
    configure
    confirm
    bootstrap
  end

  def configure
    Opscode::Test.configure do |c|
      c.instance_eval(File.read(config[:config_file]))
    end
  end

  def confirm
    ######################################################################
    # warning, for Tim
    ######################################################################

    # TODO: print out a warning with the configuration variables, stating
    # that you are about to do some serious damage
  end

  def bootstrap
    Opscode::Test::Bootstrapper.new.bootstrap(config[:bootstrap_script])
  end

  # check that the config file and bootstrap scripts are specified
  # and that they exist
  def validate_options!
    parse_options

    if config[:config_file]
      if !File.exists?(config[:config_file])
        STDERR.puts "ERROR: Config file #{config[:config_file]} does not exist."
        print_usage_and_exit
      end
    else
      STDERR.puts "ERROR: Please specify a config file."
      print_usage_and_exit
    end

    if config[:bootstrap_script]
      if !File.exists?(config[:bootstrap_script])
        STDERR.puts "ERROR: Bootstrap script #{config[:bootstrap_script]} does not exist."
        print_usage_and_exit
      end
    else
      STDERR.puts "ERROR: Please specify a bootstrap script"
      print_usage_and_exit
    end
  end

  def print_usage_and_exit
    STDERR.puts self.opt_parser
    exit(1)
  end
end

if __FILE__ == $0
  BootstrapPlatform.new.run
end

