#! /usr/bin/env ruby

require 'rubygems'
$:.unshift(File.expand_path('../../lib', __FILE__))

require 'opscode/test'
require 'opscode/test/config'
require 'opscode/test/database_config'
require 'opscode/test/database_helper'
require 'opscode/test/dsl'
require 'opscode/test/models/superuser'
require 'restclient'
require 'json'
require 'opscode/mappers'

Opscode::Test.configure do |c|
  c.output_directory = '/tmp/opscode-platform-test'

  c.mysql_host = 'localhost'
  c.mysql_user = 'root'
  c.mysql_password = ''

  c.couchdb_host = 'localhost'
  c.couchdb_port = '5984'

  c.couchdbauthz_host = 'localhost'
  c.couchdbauthz_port = '5984'

  c.authz_host = 'localhost'
  c.authz_port = '5959'

  c.cert_host = 'localhost'
  c.cert_port = '5140'

  c.superuser_cert = '/tmp/opscode-platform-test/superuser.cert'
  c.superuser_key  = '/tmp/opscode-platform-test/superuser.pem'
end

config = Opscode::Test.config

######################################################################
# warning, for Tim
######################################################################

# TODO: print out a warning with the configuration variables, stating
# that you are about to do some serious damage

include Opscode::Test::DatabaseHelper

######################################################################
# create the credentials dir
######################################################################

unless Dir.exists?(config.output_directory)
  Dir.mkdir(config.output_directory)
end

######################################################################
# truncate the sql tables
######################################################################

mysql_db[:users].truncate

######################################################################
# delete the couchdb databases
######################################################################

couchdbauthz_databases = %w{
authorization
authorization_integration
}

couchdbauthz_databases.each do |name|
  begin
    couchdb_database(:authz, name).delete!
  rescue RestClient::ResourceNotFound; end
end

couchdb_databases = %w{
opscode_account
opscode_account_integration
opscode_account_internal
opscode_account_internal_integration
test_harness_setup
jobs
jobs_spec
}

couchdb_databases.each do |name|
  begin
    couchdb_database(:main, name).delete!
  rescue RestClient::ResourceNotFound; end
end

######################################################################
# clean up after naughty run
######################################################################

# hmmm... unlinking files? for what?

######################################################################
# create the couchdb databases
######################################################################

# create the authz databases
couchdbauthz_databases = %w{
authorization
}

couchdbauthz_databases.each do |name|
  couchdb_database(:authz, name).create!
end

# replicate the authz design docs
authz_db = couchdb_database(:authz, 'authorization')
replication_body = {
  :target => authz_db.uri,
  :source => 'authorization_design_documents'
}.to_json
replication_headers = {
  'Content-Type' => 'application/json'
}
RestClient.post("#{couchdb_server(:authz).uri}/_replicate",
                replication_body,
                replication_headers)

# create the account databases
couchdb_databases = %w{
opscode_account
opscode_account_internal
}

couchdb_databases.each do |name|
  couchdb_database(:main, name).create!
end

######################################################################
# create the superuser
######################################################################

# load the superuser cert and key from a file
cert_file = File.read(config.superuser_cert)
user_cert = OpenSSL::X509::Certificate.new(cert_file)

key_file = File.read(config.superuser_key)
user_key = OpenSSL::PKey::RSA.new(key_file)

include Opscode::Test::DSL

su_authz_id = superuser do |u|
  u.name = 'platform-superuser'
  u.first_name = 'Clark'
  u.last_name = 'Kent'
  u.display_name = ' Clark Kent'
  u.email = 'kryptonite@opscode.com'
  u.password = 'kryptonite'
  u.certificate = user_cert.to_s
end

######################################################################
# create the global containers
######################################################################

auth_database = couchdb_database(:authz, 'authorization')
acct_database = couchdb_database(:main, 'opscode_account')

containersets = auth_database.get('containersets')['global_containerset']
containersets.each do |name, path|
  container = {
    :containername => name,
    :containerpath => path,
    :requester_id  => su_authz_id
  }
  Mixlib::Authorization::Models::Container.on(acct_database).new(container).save
end

